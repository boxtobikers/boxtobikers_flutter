import 'dart:async';

import 'package:boxtobikers/core/app/providers/app_state.provider.dart';
import 'package:boxtobikers/core/auth/providers/app_auth.provider.dart';
import 'package:boxtobikers/core/auth/repositories/app_auth.repository.dart';
import 'package:boxtobikers/core/auth/services/app_session.service.dart';
import 'package:boxtobikers/core/http/http_config.dart';
import 'package:boxtobikers/core/http/http_service.dart';
import 'package:boxtobikers/features/settings/business/services/settings_service.dart';
import 'package:flutter/foundation.dart';

/// Classe responsable de l'initialisation de l'application
/// Principe SOLID : Single Responsibility - g√®re uniquement le lancement de l'app
/// Principe DRY : centralise la logique de d√©marrage
class AppLauncher {
  static AppStateProvider? _appStateProvider;
  static AppAuthProvider? _authProvider;

  /// Initialise l'application au d√©marrage ou au r√©veil
  ///
  /// Cette m√©thode est appel√©e :
  /// 1. Au d√©marrage de l'application (premi√®re fois ou apr√®s red√©marrage)
  /// 2. Au r√©veil de l'application (retour depuis le background)
  ///
  /// Comportement :
  /// - Au D√âMARRAGE : charge les pr√©f√©rences du device ou celles sauvegard√©es
  /// - Au R√âVEIL : conserve les pr√©f√©rences utilisateur (pas d'√©crasement)
  /// - Les modifications de l'utilisateur persistent jusqu'au red√©marrage complet
  static Future<Map<String, dynamic>> initialize() async {
    // Si d√©j√† initialis√©, retourne les instances existantes (r√©veil)
    if (_appStateProvider != null &&
        _authProvider != null &&
        _appStateProvider!.isInitialized) {
      debugPrint('üîÑ AppLauncher: Application en r√©veil - conservation des pr√©f√©rences');
      return {
        'appStateProvider': _appStateProvider!,
        'authProvider': _authProvider!,
      };
    }

    debugPrint('üöÄ AppLauncher: D√©marrage de l\'application');

    // 1. Initialiser le service HTTP
    _initializeHttpService();
    debugPrint('‚úÖ AppLauncher: Service HTTP initialis√©');

    // 2. Initialiser le service de session
    final sessionService = await AppSessionService.create();
    debugPrint('‚úÖ AppLauncher: Service de session initialis√©');

    // 3. Initialiser le repository d'authentification
    final authRepository = AppAuthRepository();
    debugPrint('‚úÖ AppLauncher: Repository d\'authentification cr√©√©');

    // 4. Cr√©er le provider d'authentification
    _authProvider = AppAuthProvider(
      authRepository: authRepository,
      sessionService: sessionService,
    );
    debugPrint('‚úÖ AppLauncher: Provider d\'authentification cr√©√©');

    // 5. Initialiser l'authentification (cr√©e une session anonyme si n√©cessaire)
    await _authProvider!.initialize();
    debugPrint('‚úÖ AppLauncher: Authentification initialis√©e');

    // 6. Cr√©er le service de pr√©f√©rences
    final settingsService = await SettingsService.create();
    debugPrint('‚úÖ AppLauncher: Service de pr√©f√©rences initialis√©');

    // 7. Cr√©er le provider d'√©tat
    _appStateProvider = AppStateProvider(settingsService);
    debugPrint('‚úÖ AppLauncher: Provider d\'√©tat cr√©√©');

    return {
      'appStateProvider': _appStateProvider!,
      'authProvider': _authProvider!,
    };
  }

  /// R√©cup√®re le provider d'√©tat (doit √™tre appel√© apr√®s initialize)
  static AppStateProvider? get appStateProvider => _appStateProvider;

  /// R√©cup√®re le provider d'authentification (doit √™tre appel√© apr√®s initialize)
  static AppAuthProvider? get authProvider => _authProvider;

  /// R√©initialise compl√®tement l'application (simule un red√©marrage)
  static Future<void> reset() async {
    if (_appStateProvider != null) {
      await _appStateProvider!.resetAllPreferences();
      _appStateProvider = null;
      debugPrint('üîÑ AppLauncher: AppStateProvider r√©initialis√©');
    }

    if (_authProvider != null) {
      await _authProvider!.signOut();
      _authProvider = null;
      debugPrint('üîÑ AppLauncher: AuthProvider r√©initialis√©');
    }

    debugPrint('üîÑ AppLauncher: Application r√©initialis√©e');
  }

  /// Initialise le service HTTP avec la configuration appropri√©e
  static void _initializeHttpService() {
    // Utilise la configuration de d√©veloppement en mode debug, production sinon
    final config = kDebugMode ? HttpConfig.development : HttpConfig.production;

    HttpService.instance.initialize(config);

    debugPrint('üåê HttpService configur√© avec baseUrl: ${config.baseUrl}');
  }
}

