import 'package:boxtobikers/core/auth/models/user_role.enum.dart';
import 'package:boxtobikers/core/auth/models/user_session.model.dart';
import 'package:boxtobikers/core/services/supabase_service.dart';
import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Repository pour g√©rer l'authentification via Supabase
/// Principe SOLID : Single Responsibility - g√®re uniquement les op√©rations d'authentification
class AuthRepository {
  final SupabaseService _supabaseService = SupabaseService.instance;

  /// UUID fixe du profil VISITOR pr√©-cr√©√© dans la base de donn√©es
  /// Ce profil est partag√© par tous les utilisateurs non connect√©s
  static const String _visitorProfileId = '00000000-0000-0000-0000-000000000000';

  /// Cr√©e une session locale VISITOR en utilisant l'utilisateur pr√©-cr√©√©
  /// Utilise le profil VISITOR pr√©-cr√©√© dans la base de donn√©es
  /// Retourne une UserSession avec le r√¥le VISITOR
  Future<UserSession?> signInAnonymously() async {
    try {
      debugPrint('üîê AuthRepository: Cr√©ation session VISITOR...');
      debugPrint('‚ÑπÔ∏è AuthRepository: Utilisation du profil VISITOR pr√©-cr√©√© (UUID: $_visitorProfileId)');

      // V√©rifier que le profil VISITOR existe dans la base de donn√©es
      final visitorProfile = await _fetchVisitorProfile();

      if (visitorProfile == null) {
        debugPrint('‚ùå AuthRepository: Profil VISITOR pr√©-cr√©√© non trouv√© dans la base de donn√©es');
        debugPrint('‚ö†Ô∏è AuthRepository: Assurez-vous d\'avoir ex√©cut√©: supabase db reset');
        return null;
      }

      debugPrint('‚úÖ AuthRepository: Profil VISITOR trouv√© - ${visitorProfile['first_name']} ${visitorProfile['last_name']}');

      // Cr√©er une session VISITOR locale
      // Note: On utilise l'UUID du profil VISITOR comme identifiant de session
      // mais on ne cr√©e pas de vraie session Supabase (pas de token)
      final session = UserSession.createVisitor(
        profileId: _visitorProfileId,
        firstName: visitorProfile['first_name'] as String,
        lastName: visitorProfile['last_name'] as String,
        email: visitorProfile['email'] as String,
      );

      debugPrint('‚úÖ AuthRepository: Session VISITOR cr√©√©e - ${session.toString()}');
      return session;
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la cr√©ation de la session VISITOR: $e');
      debugPrint('Stack trace: $stackTrace');
      return null;
    }
  }

  /// R√©cup√®re le profil VISITOR pr√©-cr√©√© depuis la base de donn√©es
  /// Ce profil a un UUID fixe: 00000000-0000-0000-0000-000000000000
  Future<Map<String, dynamic>?> _fetchVisitorProfile() async {
    try {
      final response = await _supabaseService.client
          .from('profiles')
          .select('''
            id,
            first_name,
            last_name,
            email,
            mobile,
            address,
            created_at,
            role_id,
            roles!inner(name)
          ''')
          .eq('id', _visitorProfileId)
          .maybeSingle();

      if (response == null) {
        return null;
      }

      // Extraire le nom du r√¥le depuis la relation
      final roleName = response['roles']['name'] as String;

      return {
        'id': response['id'],
        'first_name': response['first_name'],
        'last_name': response['last_name'],
        'email': response['email'],
        'mobile': response['mobile'],
        'address': response['address'],
        'role': roleName,
      };
    } catch (e) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la r√©cup√©ration du profil VISITOR: $e');
      return null;
    }
  }

  /// Se connecte avec email et mot de passe
  /// Retourne une UserSession avec le r√¥le r√©cup√©r√© depuis la BDD
  Future<UserSession?> signInWithEmail({
    required String email,
    required String password,
  }) async {
    try {
      debugPrint('üîê AuthRepository: Connexion avec email: $email');

      final response = await _supabaseService.client.auth.signInWithPassword(
        email: email,
        password: password,
      );

      if (response.user == null) {
        debugPrint('‚ùå AuthRepository: √âchec de la connexion');
        return null;
      }

      debugPrint('‚úÖ AuthRepository: Connexion r√©ussie - User ID: ${response.user!.id}');

      // R√©cup√©rer le profil et le r√¥le depuis la BDD
      final profile = await _fetchUserProfile(response.user!.id);

      if (profile == null) {
        debugPrint('‚ùå AuthRepository: Profil non trouv√© pour l\'utilisateur');
        return null;
      }

      debugPrint('‚úÖ AuthRepository: Profil r√©cup√©r√© - Role: ${profile['role']}');

      // Cr√©er la session authentifi√©e
      final session = UserSession.createAuthenticated(
        supabaseUserId: response.user!.id,
        email: response.user!.email ?? email,
        role: UserRole.fromString(profile['role'] as String),
        supabaseToken: response.session?.accessToken,
        firstName: profile['first_name'] as String?,
        lastName: profile['last_name'] as String?,
        phone: profile['mobile'] as String?,
        address: profile['address'] as String?,
      );

      debugPrint('‚úÖ AuthRepository: Session cr√©√©e - ${session.toString()}');
      return session;
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la connexion: $e');
      debugPrint('Stack trace: $stackTrace');
      return null;
    }
  }

  /// Inscrit un nouvel utilisateur avec email et mot de passe
  /// Le trigger Supabase cr√©era automatiquement un profil avec le r√¥le VISITOR
  Future<UserSession?> signUpWithEmail({
    required String email,
    required String password,
    String? firstName,
    String? lastName,
  }) async {
    try {
      debugPrint('üîê AuthRepository: Inscription avec email: $email');

      final response = await _supabaseService.client.auth.signUp(
        email: email,
        password: password,
        data: {
          'first_name': firstName ?? '',
          'last_name': lastName ?? '',
        },
      );

      if (response.user == null) {
        debugPrint('‚ùå AuthRepository: √âchec de l\'inscription');
        return null;
      }

      debugPrint('‚úÖ AuthRepository: Inscription r√©ussie - User ID: ${response.user!.id}');

      // Attendre un peu que le trigger cr√©e le profil
      await Future.delayed(const Duration(milliseconds: 500));

      // R√©cup√©rer le profil cr√©√© par le trigger
      final profile = await _fetchUserProfile(response.user!.id);

      if (profile == null) {
        debugPrint('‚ö†Ô∏è AuthRepository: Profil non encore cr√©√©, utilisation des valeurs par d√©faut');
        // Cr√©er une session avec le r√¥le VISITOR par d√©faut
        return UserSession.createAuthenticated(
          supabaseUserId: response.user!.id,
          email: email,
          role: UserRole.visitor,
          supabaseToken: response.session?.accessToken,
          firstName: firstName,
          lastName: lastName,
        );
      }

      // Cr√©er la session avec les donn√©es du profil
      final session = UserSession.createAuthenticated(
        supabaseUserId: response.user!.id,
        email: response.user!.email ?? email,
        role: UserRole.fromString(profile['role'] as String),
        supabaseToken: response.session?.accessToken,
        firstName: profile['first_name'] as String?,
        lastName: profile['last_name'] as String?,
        phone: profile['mobile'] as String?,
        address: profile['address'] as String?,
      );

      debugPrint('‚úÖ AuthRepository: Session cr√©√©e apr√®s inscription - ${session.toString()}');
      return session;
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de l\'inscription: $e');
      debugPrint('Stack trace: $stackTrace');
      return null;
    }
  }

  /// Se d√©connecte de Supabase
  Future<bool> signOut() async {
    try {
      debugPrint('üîê AuthRepository: D√©connexion...');
      await _supabaseService.client.auth.signOut();
      debugPrint('‚úÖ AuthRepository: D√©connexion r√©ussie');
      return true;
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la d√©connexion: $e');
      debugPrint('Stack trace: $stackTrace');
      return false;
    }
  }

  /// R√©cup√®re la session Supabase actuelle si elle existe
  /// Retourne null si aucune session active
  /// Note: Si null est retourn√©, le AuthProvider cr√©era automatiquement une session VISITOR locale
  Future<UserSession?> getCurrentSession() async {
    try {
      final session = _supabaseService.client.auth.currentSession;
      final user = _supabaseService.client.auth.currentUser;

      if (session == null || user == null) {
        debugPrint('‚ÑπÔ∏è AuthRepository: Aucune session Supabase active');
        debugPrint('‚ÑπÔ∏è AuthRepository: Une session VISITOR locale sera cr√©√©e par le provider');
        return null;
      }

      debugPrint('‚ÑπÔ∏è AuthRepository: Session Supabase trouv√©e - User ID: ${user.id}');

      // V√©rifier si c'est un utilisateur anonyme Supabase (legacy)
      // Note: Avec le nouveau syst√®me VISITOR, cette branche ne devrait plus √™tre utilis√©e
      if (user.isAnonymous) {
        debugPrint('‚ö†Ô∏è AuthRepository: Utilisateur anonyme Supabase d√©tect√© (legacy)');
        debugPrint('‚ÑπÔ∏è AuthRepository: Consid√©r√© comme d√©connect√©, une session VISITOR sera cr√©√©e');
        // On se d√©connecte de l'utilisateur anonyme Supabase
        await signOut();
        return null;
      }

      // R√©cup√©rer le profil depuis la BDD
      final profile = await _fetchUserProfile(user.id);

      if (profile == null) {
        debugPrint('‚ö†Ô∏è AuthRepository: Profil non trouv√©, session invalide');
        return null;
      }

      // Cr√©er la session authentifi√©e
      return UserSession.createAuthenticated(
        supabaseUserId: user.id,
        email: user.email ?? '',
        role: UserRole.fromString(profile['role'] as String),
        supabaseToken: session.accessToken,
        firstName: profile['first_name'] as String?,
        lastName: profile['last_name'] as String?,
        phone: profile['mobile'] as String?,
        address: profile['address'] as String?,
      );
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la r√©cup√©ration de la session: $e');
      debugPrint('Stack trace: $stackTrace');
      return null;
    }
  }

  /// √âcoute les changements d'√©tat d'authentification Supabase
  Stream<AuthState> get authStateChanges => _supabaseService.client.auth.onAuthStateChange;

  /// R√©cup√®re le profil utilisateur depuis la BDD
  /// Inclut le r√¥le en joignant la table roles
  Future<Map<String, dynamic>?> _fetchUserProfile(String userId) async {
    try {
      final response = await _supabaseService.client
          .from('profiles')
          .select('''
            id,
            first_name,
            last_name,
            email,
            mobile,
            address,
            created_at,
            role_id,
            roles!inner(name)
          ''')
          .eq('id', userId)
          .single();

      // Extraire le nom du r√¥le depuis la relation
      final roleName = response['roles']['name'] as String;

      return {
        'id': response['id'],
        'first_name': response['first_name'],
        'last_name': response['last_name'],
        'email': response['email'],
        'mobile': response['mobile'],
        'address': response['address'],
        'role': roleName,
      };
    } catch (e) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la r√©cup√©ration du profil: $e');
      return null;
    }
  }

  /// Met √† jour le profil utilisateur dans la BDD
  Future<bool> updateProfile({
    required String userId,
    String? firstName,
    String? lastName,
    String? phone,
    String? address,
  }) async {
    try {
      debugPrint('üîê AuthRepository: Mise √† jour du profil pour User ID: $userId');

      final updates = <String, dynamic>{};
      if (firstName != null) updates['first_name'] = firstName;
      if (lastName != null) updates['last_name'] = lastName;
      if (phone != null) updates['mobile'] = phone;
      if (address != null) updates['address'] = address;

      if (updates.isEmpty) {
        debugPrint('‚ö†Ô∏è AuthRepository: Aucune mise √† jour √† effectuer');
        return true;
      }

      await _supabaseService.client
          .from('profiles')
          .update(updates)
          .eq('id', userId);

      debugPrint('‚úÖ AuthRepository: Profil mis √† jour avec succ√®s');
      return true;
    } catch (e, stackTrace) {
      debugPrint('‚ùå AuthRepository: Erreur lors de la mise √† jour du profil: $e');
      debugPrint('Stack trace: $stackTrace');
      return false;
    }
  }
}

